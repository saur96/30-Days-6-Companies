// Approach is Mentioned in comments;


class Solution {
public:

    long long int dist(vector<int>& p1, vector<int>& p2){
        return pow(p1[0] - p2[0],2) + pow(p1[1] - p2[1],2);
    }

// cheking distance of all sides are same or not and all diagonals are same are not
bool check(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4){
    return dist(p1,p2) > 0 && dist(p1,p2) == dist(p2,p3) && dist(p2,p3) == dist(p3,p4)   && dist(p3,p4) == dist(p4,p1) && dist(p1,p3) == dist(p2,p4);
}

// Checking if any two points are same
bool repeat(vector<int>& p1, vector<int>& p2){
    return p1[0] == p2[0] && p1[1] == p2[1];

}

    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if(repeat(p1,p2) || repeat(p1,p3) || repeat(p1,p4) || repeat(p2,p3) || repeat(p2,p4) || repeat(p3,p4)){ //if any two points repeats obvious that sq will not form so return false else check condition -
            return false;
        }
        else{ // 24 permutations acn be formed but they blongs to only 3 categarious mentioned below
        return check(p1,p2,p3,p4) || check(p1,p3,p2,p4) || check(p1,p2,p4,p3);
        }
    }
};
